/**
 * Red Matter
 * API configuration
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("AuthenticationApi", () => {
  let instance: api.AuthenticationApi
  beforeEach(function() {
    instance = new api.AuthenticationApi(config)
  });

  test("userLogin", () => {
    const body: api.Body = undefined
    return expect(instance.userLogin(body, {})).resolves.toBe(null)
  })
  test("userResigter", () => {
    const body: api.Body1 = undefined
    return expect(instance.userResigter(body, {})).resolves.toBe(null)
  })
})

describe("ExperimentApi", () => {
  let instance: api.ExperimentApi
  beforeEach(function() {
    instance = new api.ExperimentApi(config)
  });

  test("createExperiment", () => {
    const body: api.ExperimentPayload = undefined
    const token: string = "token_example"
    const workspaceId: string = "workspaceId_example"
    return expect(instance.createExperiment(body, token, workspaceId, {})).resolves.toBe(null)
  })
  test("getExperiment", () => {
    const token: string = "token_example"
    const workspaceId: string = "workspaceId_example"
    return expect(instance.getExperiment(token, workspaceId, {})).resolves.toBe(null)
  })
  test("updateExperiment", () => {
    const body: api.ExperimentPayload = undefined
    const token: string = "token_example"
    const workspaceId: string = "workspaceId_example"
    const experimentId: string = "experimentId_example"
    return expect(instance.updateExperiment(body, token, workspaceId, experimentId, {})).resolves.toBe(null)
  })
})

describe("GraphsGatesApi", () => {
  let instance: api.GraphsGatesApi
  beforeEach(function() {
    instance = new api.GraphsGatesApi(config)
  });

  test("deleteGraph", () => {
    const token: string = "token_example"
    const body: api.Body6 = undefined
    return expect(instance.deleteGraph(token, body, {})).resolves.toBe(null)
  })
  test("fileInfo", () => {
    const organisationId: string = "organisationId_example"
    const workspaceId: string = "workspaceId_example"
    const id: string = "id_example"
    const token: string = "token_example"
    return expect(instance.fileInfo(organisationId, workspaceId, id, token, {})).resolves.toBe(null)
  })
  test("getCanvas", () => {
    const workspaceId: string = "workspaceId_example"
    const organisationId: string = "organisationId_example"
    const fileIds: string = "fileIds_example"
    const currentFileId: string = "currentFileId_example"
    const height: number = 56
    const width: number = 56
    const paramX: string = "paramX_example"
    const paramY: string = "paramY_example"
    const selectedGate: string = "selectedGate_example"
    const xScale: string = "xScale_example"
    const yScale: string = "yScale_example"
    const token: string = "token_example"
    const chartType: string = "chartType_example"
    return expect(instance.getCanvas(workspaceId, organisationId, fileIds, currentFileId, height, width, paramX, paramY, selectedGate, xScale, yScale, token, chartType, {})).resolves.toBe(null)
  })
  test("getGates", () => {
    const workspaceId: string = "workspaceId_example"
    const token: string = "token_example"
    return expect(instance.getGates(workspaceId, token, {})).resolves.toBe(null)
  })
  test("getGraphs", () => {
    const workspaceId: string = "workspaceId_example"
    const organisationId: string = "organisationId_example"
    const id: string = "id_example"
    const height: number = 56
    const width: number = 56
    const token: string = "token_example"
    return expect(instance.getGraphs(workspaceId, organisationId, id, height, width, token, {})).resolves.toBe(null)
  })
  test("quadGate", () => {
    const organisationId: string = "organisationId_example"
    const id: string = "id_example"
    const coordX: number = 56
    const coordY: number = 56
    const paramX: number = 56
    const paramY: number = 56
    const parent: string = "parent_example"
    const yScale: string = "yScale_example"
    const xScale: string = "xScale_example"
    const width: number = 56
    const height: number = 56
    const token: string = "token_example"
    return expect(instance.quadGate(organisationId, id, coordX, coordY, paramX, paramY, parent, yScale, xScale, width, height, token, {})).resolves.toBe(null)
  })
  test("setGate", () => {
    const workspaceId: string = "workspaceId_example"
    const organisationId: string = "organisationId_example"
    const id: string = "id_example"
    const gateNameUser: string = "gateNameUser_example"
    const gatingCoords: api.GatingCoords = undefined
    const paramX: number = 56
    const paramY: number = 56
    const parent: string = "parent_example"
    const yScale: string = "yScale_example"
    const xScale: string = "xScale_example"
    const width: number = 56
    const height: number = 56
    const token: string = "token_example"
    return expect(instance.setGate(workspaceId, organisationId, id, gateNameUser, gatingCoords, paramX, paramY, parent, yScale, xScale, width, height, token, {})).resolves.toBe(null)
  })
  test("setGraph", () => {
    const token: string = "token_example"
    const body: api.any = undefined
    return expect(instance.setGraph(token, body, {})).resolves.toBe(null)
  })
  test("statistics", () => {
    const organisationId: string = "organisationId_example"
    const selectedGate: string = "selectedGate_example"
    const id: string = "id_example"
    const token: string = "token_example"
    return expect(instance.statistics(organisationId, selectedGate, id, token, {})).resolves.toBe(null)
  })
  test("updateGraph", () => {
    const token: string = "token_example"
    const body: api.Body5 = undefined
    return expect(instance.updateGraph(token, body, {})).resolves.toBe(null)
  })
})

describe("UserApi", () => {
  let instance: api.UserApi
  beforeEach(function() {
    instance = new api.UserApi(config)
  });

  test("feedback", () => {
    const token: string = "token_example"
    const body: api.Body2 = undefined
    return expect(instance.feedback(token, body, {})).resolves.toBe(null)
  })
  test("getAccount", () => {
    const token: string = "token_example"
    return expect(instance.getAccount(token, {})).resolves.toBe(null)
  })
  test("updateAccount", () => {
    const token: string = "token_example"
    const body: api.any = undefined
    return expect(instance.updateAccount(token, body, {})).resolves.toBe(null)
  })
  test("userexpertorders", () => {
    const token: string = "token_example"
    return expect(instance.userexpertorders(token, {})).resolves.toBe(null)
  })
})

describe("WorkspaceFilesApi", () => {
  let instance: api.WorkspaceFilesApi
  beforeEach(function() {
    instance = new api.WorkspaceFilesApi(config)
  });

  test("deleteFile", () => {
    const workspaceId: string = "workspaceId_example"
    const fileId: string = "fileId_example"
    const token: string = "token_example"
    return expect(instance.deleteFile(workspaceId, fileId, token, {})).resolves.toBe(null)
  })
  test("editFiles", () => {
    const workspaceId: string = "workspaceId_example"
    const fileId: string = "fileId_example"
    const label: string = "label_example"
    const token: string = "token_example"
    return expect(instance.editFiles(workspaceId, fileId, label, token, {})).resolves.toBe(null)
  })
  test("uploadFile", () => {
    const token: string = "token_example"
    const workspaceId: string = "workspaceId_example"
    const organisationId: string = "organisationId_example"
    const file0: Blob = "file0_example"
    return expect(instance.uploadFile(token, workspaceId, organisationId, file0, {})).resolves.toBe(null)
  })
  test("workspaceFiles", () => {
    const organisationId: string = "organisationId_example"
    const workspaceId: string = "workspaceId_example"
    const token: string = "token_example"
    return expect(instance.workspaceFiles(organisationId, workspaceId, token, {})).resolves.toBe(null)
  })
})

describe("WorkspacesApi", () => {
  let instance: api.WorkspacesApi
  beforeEach(function() {
    instance = new api.WorkspacesApi(config)
  });

  test("appWorkspace", () => {
    const organisationId: string = "organisationId_example"
    const token: string = "token_example"
    return expect(instance.appWorkspace(organisationId, token, {})).resolves.toBe(null)
  })
  test("createWorkspace", () => {
    const token: string = "token_example"
    const body: api.Body3 = undefined
    return expect(instance.createWorkspace(token, body, {})).resolves.toBe(null)
  })
  test("deleteWorkspace", () => {
    const workspaceId: string = "workspaceId_example"
    const token: string = "token_example"
    return expect(instance.deleteWorkspace(workspaceId, token, {})).resolves.toBe(null)
  })
  test("editWorkspace", () => {
    const workspaceId: string = "workspaceId_example"
    const workspaceName: string = "workspaceName_example"
    const token: string = "token_example"
    return expect(instance.editWorkspace(workspaceId, workspaceName, token, {})).resolves.toBe(null)
  })
})

