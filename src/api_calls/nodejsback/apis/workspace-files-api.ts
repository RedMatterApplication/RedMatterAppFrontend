/* tslint:disable */
/* eslint-disable */
/**
 * Red Matter
 * API configuration
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse2005 } from '../models';
import { InlineResponse2008 } from '../models';
import { InlineResponse4001 } from '../models';
/**
 * WorkspaceFilesApi - axios parameter creator
 * @export
 */
export const WorkspaceFilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * To delete workspace file, we need to pass workspaceId and fileId as query parameters
         * @summary Deleting Workspace File
         * @param {string} workspaceId WorkspaceId
         * @param {string} fileId File Id
         * @param {string} token Generate token and pass it in header
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFile: async (workspaceId: string, fileId: string, token: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError('workspaceId','Required parameter workspaceId was null or undefined when calling deleteFile.');
            }
            // verify required parameter 'fileId' is not null or undefined
            if (fileId === null || fileId === undefined) {
                throw new RequiredError('fileId','Required parameter fileId was null or undefined when calling deleteFile.');
            }
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling deleteFile.');
            }
            const localVarPath = `/api/files/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (workspaceId !== undefined) {
                localVarQueryParameter['workspaceId'] = workspaceId;
            }

            if (fileId !== undefined) {
                localVarQueryParameter['fileId'] = fileId;
            }

            if (token !== undefined && token !== null) {
                localVarHeaderParameter['token'] = String(token);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * To edit workspace file, we need to pass workspaceId, fileId and label as query parameters
         * @summary Editing Workspace File
         * @param {string} workspaceId WorkspaceId
         * @param {string} fileId File Id
         * @param {string} label Edited File Label
         * @param {string} token Generate token and pass it in header
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editFiles: async (workspaceId: string, fileId: string, label: string, token: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError('workspaceId','Required parameter workspaceId was null or undefined when calling editFiles.');
            }
            // verify required parameter 'fileId' is not null or undefined
            if (fileId === null || fileId === undefined) {
                throw new RequiredError('fileId','Required parameter fileId was null or undefined when calling editFiles.');
            }
            // verify required parameter 'label' is not null or undefined
            if (label === null || label === undefined) {
                throw new RequiredError('label','Required parameter label was null or undefined when calling editFiles.');
            }
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling editFiles.');
            }
            const localVarPath = `/api/file/edit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (workspaceId !== undefined) {
                localVarQueryParameter['workspaceId'] = workspaceId;
            }

            if (fileId !== undefined) {
                localVarQueryParameter['fileId'] = fileId;
            }

            if (label !== undefined) {
                localVarQueryParameter['label'] = label;
            }

            if (token !== undefined && token !== null) {
                localVarHeaderParameter['token'] = String(token);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * To uplaod fcs file we need to pass organisationId and workspaceId in form data
         * @summary Upload fcs file
         * @param {string} token token is passed in header
         * @param {string} [workspaceId] 
         * @param {string} [organisationId] 
         * @param {string} [file0] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFile: async (token: string, workspaceId?: string, organisationId?: string, file0?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling uploadFile.');
            }
            const localVarPath = `/api/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            if (token !== undefined && token !== null) {
                localVarHeaderParameter['token'] = String(token);
            }


            if (workspaceId !== undefined) { 
                localVarFormParams.append('workspaceId', workspaceId as any);
            }

            if (organisationId !== undefined) { 
                localVarFormParams.append('organisationId', organisationId as any);
            }

            if (file0 !== undefined) { 
                localVarFormParams.append('file[0]', file0 as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * To get workspace files, we need to pass organisationId and workspaceId in query params
         * @summary Getting Workspace Files
         * @param {string} organisationId Organisation Id of logged in user
         * @param {string} workspaceId Workspace Id
         * @param {string} token token is passed in header
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceFiles: async (organisationId: string, workspaceId: string, token: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'organisationId' is not null or undefined
            if (organisationId === null || organisationId === undefined) {
                throw new RequiredError('organisationId','Required parameter organisationId was null or undefined when calling workspaceFiles.');
            }
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError('workspaceId','Required parameter workspaceId was null or undefined when calling workspaceFiles.');
            }
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling workspaceFiles.');
            }
            const localVarPath = `/api/files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (organisationId !== undefined) {
                localVarQueryParameter['organisationId'] = organisationId;
            }

            if (workspaceId !== undefined) {
                localVarQueryParameter['workspaceId'] = workspaceId;
            }

            if (token !== undefined && token !== null) {
                localVarHeaderParameter['token'] = String(token);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkspaceFilesApi - functional programming interface
 * @export
 */
export const WorkspaceFilesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * To delete workspace file, we need to pass workspaceId and fileId as query parameters
         * @summary Deleting Workspace File
         * @param {string} workspaceId WorkspaceId
         * @param {string} fileId File Id
         * @param {string} token Generate token and pass it in header
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFile(workspaceId: string, fileId: string, token: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2005>> {
            const localVarAxiosArgs = await WorkspaceFilesApiAxiosParamCreator(configuration).deleteFile(workspaceId, fileId, token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * To edit workspace file, we need to pass workspaceId, fileId and label as query parameters
         * @summary Editing Workspace File
         * @param {string} workspaceId WorkspaceId
         * @param {string} fileId File Id
         * @param {string} label Edited File Label
         * @param {string} token Generate token and pass it in header
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editFiles(workspaceId: string, fileId: string, label: string, token: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2005>> {
            const localVarAxiosArgs = await WorkspaceFilesApiAxiosParamCreator(configuration).editFiles(workspaceId, fileId, label, token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * To uplaod fcs file we need to pass organisationId and workspaceId in form data
         * @summary Upload fcs file
         * @param {string} token token is passed in header
         * @param {string} [workspaceId] 
         * @param {string} [organisationId] 
         * @param {string} [file0] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadFile(token: string, workspaceId?: string, organisationId?: string, file0?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2005>> {
            const localVarAxiosArgs = await WorkspaceFilesApiAxiosParamCreator(configuration).uploadFile(token, workspaceId, organisationId, file0, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * To get workspace files, we need to pass organisationId and workspaceId in query params
         * @summary Getting Workspace Files
         * @param {string} organisationId Organisation Id of logged in user
         * @param {string} workspaceId Workspace Id
         * @param {string} token token is passed in header
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workspaceFiles(organisationId: string, workspaceId: string, token: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2008>> {
            const localVarAxiosArgs = await WorkspaceFilesApiAxiosParamCreator(configuration).workspaceFiles(organisationId, workspaceId, token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * WorkspaceFilesApi - factory interface
 * @export
 */
export const WorkspaceFilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * To delete workspace file, we need to pass workspaceId and fileId as query parameters
         * @summary Deleting Workspace File
         * @param {string} workspaceId WorkspaceId
         * @param {string} fileId File Id
         * @param {string} token Generate token and pass it in header
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFile(workspaceId: string, fileId: string, token: string, options?: any): AxiosPromise<InlineResponse2005> {
            return WorkspaceFilesApiFp(configuration).deleteFile(workspaceId, fileId, token, options).then((request) => request(axios, basePath));
        },
        /**
         * To edit workspace file, we need to pass workspaceId, fileId and label as query parameters
         * @summary Editing Workspace File
         * @param {string} workspaceId WorkspaceId
         * @param {string} fileId File Id
         * @param {string} label Edited File Label
         * @param {string} token Generate token and pass it in header
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editFiles(workspaceId: string, fileId: string, label: string, token: string, options?: any): AxiosPromise<InlineResponse2005> {
            return WorkspaceFilesApiFp(configuration).editFiles(workspaceId, fileId, label, token, options).then((request) => request(axios, basePath));
        },
        /**
         * To uplaod fcs file we need to pass organisationId and workspaceId in form data
         * @summary Upload fcs file
         * @param {string} token token is passed in header
         * @param {string} [workspaceId] 
         * @param {string} [organisationId] 
         * @param {string} [file0] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFile(token: string, workspaceId?: string, organisationId?: string, file0?: string, options?: any): AxiosPromise<InlineResponse2005> {
            return WorkspaceFilesApiFp(configuration).uploadFile(token, workspaceId, organisationId, file0, options).then((request) => request(axios, basePath));
        },
        /**
         * To get workspace files, we need to pass organisationId and workspaceId in query params
         * @summary Getting Workspace Files
         * @param {string} organisationId Organisation Id of logged in user
         * @param {string} workspaceId Workspace Id
         * @param {string} token token is passed in header
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceFiles(organisationId: string, workspaceId: string, token: string, options?: any): AxiosPromise<InlineResponse2008> {
            return WorkspaceFilesApiFp(configuration).workspaceFiles(organisationId, workspaceId, token, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WorkspaceFilesApi - object-oriented interface
 * @export
 * @class WorkspaceFilesApi
 * @extends {BaseAPI}
 */
export class WorkspaceFilesApi extends BaseAPI {
    /**
     * To delete workspace file, we need to pass workspaceId and fileId as query parameters
     * @summary Deleting Workspace File
     * @param {string} workspaceId WorkspaceId
     * @param {string} fileId File Id
     * @param {string} token Generate token and pass it in header
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceFilesApi
     */
    public deleteFile(workspaceId: string, fileId: string, token: string, options?: any) {
        return WorkspaceFilesApiFp(this.configuration).deleteFile(workspaceId, fileId, token, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * To edit workspace file, we need to pass workspaceId, fileId and label as query parameters
     * @summary Editing Workspace File
     * @param {string} workspaceId WorkspaceId
     * @param {string} fileId File Id
     * @param {string} label Edited File Label
     * @param {string} token Generate token and pass it in header
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceFilesApi
     */
    public editFiles(workspaceId: string, fileId: string, label: string, token: string, options?: any) {
        return WorkspaceFilesApiFp(this.configuration).editFiles(workspaceId, fileId, label, token, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * To uplaod fcs file we need to pass organisationId and workspaceId in form data
     * @summary Upload fcs file
     * @param {string} token token is passed in header
     * @param {string} [workspaceId] 
     * @param {string} [organisationId] 
     * @param {string} [file0] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceFilesApi
     */
    public uploadFile(token: string, workspaceId?: string, organisationId?: string, file0?: string, options?: any) {
        return WorkspaceFilesApiFp(this.configuration).uploadFile(token, workspaceId, organisationId, file0, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * To get workspace files, we need to pass organisationId and workspaceId in query params
     * @summary Getting Workspace Files
     * @param {string} organisationId Organisation Id of logged in user
     * @param {string} workspaceId Workspace Id
     * @param {string} token token is passed in header
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceFilesApi
     */
    public workspaceFiles(organisationId: string, workspaceId: string, token: string, options?: any) {
        return WorkspaceFilesApiFp(this.configuration).workspaceFiles(organisationId, workspaceId, token, options).then((request) => request(this.axios, this.basePath));
    }
}
